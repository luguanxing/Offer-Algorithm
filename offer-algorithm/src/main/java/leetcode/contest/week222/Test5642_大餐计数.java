package leetcode.contest.week222;

import java.math.BigInteger;
import java.util.*;

public class Test5642_大餐计数 {

    public static void main(String[] args) {
        System.out.println(new Solution().countPairs(
                new int[]{1, 3, 5, 7, 9}
        ));
        System.out.println(new Solution().countPairs(
                new int[]{1, 1, 1, 3, 3, 3, 7}
        ));
        System.out.println(new Solution().countPairs(
                new int[]{1948, 100, 3, 1, 1, 0, 627187, 421389, 3562, 4630, 2263, 5929, 5313, 60223, 444, 580, 11, 5, 247, 9, 383, 1665, 1457, 2639, 7, 57, 151137, 111007, 329, 1719, 65483, 53, 0, 2, 65, 63, 0, 2, 0, 1, 771, 1277, 61157, 4379, 133234, 128910, 5101, 125971, 1, 1, 111, 145, 48473, 213671, 258264, 3880, 1, 0, 85, 43, 526966, 521610, 53016, 12520, 5, 11, 328137, 720439, 0, 4, 2, 30, 74, 950, 2, 0, 315, 197, 0, 1, 0, 2, 1, 0, 7, 9, 20, 12, 41, 87, 944, 80, 235386, 26758, 53, 459, 1529, 519, 2004, 2092, 65025, 459263, 162875, 99269, 12, 4, 66136, 64936, 13, 51, 126086, 4986, 114271, 16801, 2855, 5337, 28, 4, 272, 240, 245, 11, 5, 3, 74, 54, 4, 28, 16109, 1032467, 0, 4, 11, 21, 5324, 2868, 29992, 494296, 15, 1, 2, 2, 27291, 5477, 0, 2, 5, 11, 58616, 989960, 15699, 49837, 267180, 781396, 4, 28, 8, 8, 5, 3, 252585, 9559, 76506, 54566, 0, 1, 12, 20, 6717, 1475, 704, 320, 14046, 2338, 124140, 6932, 50, 14, 4, 0, 1996, 30772, 176551, 85593, 10, 118, 36679, 225465, 1, 0, 426, 86, 0, 1, 907, 117, 84415, 46657, 164, 348, 84, 172, 372, 140, 2191, 14193, 28183, 102889, 240, 16, 133, 3963, 5, 3, 4, 12, 2, 0, 3984, 112, 386, 638, 49630, 81442, 3616, 480, 402706, 121582, 427, 85, 358, 666, 61, 195, 15356, 1028, 3, 1, 58, 6, 33, 95, 133593, 914983, 55499, 10037, 0, 2, 2270, 1826, 62129, 3407, 16, 16, 1, 0, 3663, 433, 373, 1675, 4903, 60633, 18, 494, 58, 70, 991319, 57257, 5, 123, 0, 2, 44, 20, 178636, 83508, 167, 89, 364797, 683779, 1110, 938, 229655, 32489, 78984, 445304, 105400, 25672, 125, 3, 70, 58, 222, 34, 458, 1590, 2677, 521611, 7857, 8527, 967, 57, 8232, 8152, 411752, 636824, 1, 0, 11, 5, 2854, 1242, 3, 29, 64, 0, 5, 3, 259079, 789497, 48, 80, 4, 0, 29, 35, 0, 1, 552849, 495727, 997933, 50643, 94064, 168080, 7665, 8719, 25848, 6920, 4, 0, 0, 2, 0, 2, 58, 70, 165, 91, 0, 2, 19486, 13282, 1556, 492, 340, 684, 7, 9, 0, 2, 28987, 102085, 126, 2, 860, 15524, 6, 10, 144436, 117708, 37, 27, 9467, 6917, 22, 10, 178, 78, 59, 5, 25, 231, 148059, 376229, 9, 7, 32, 32, 128, 0, 23138, 9630, 2286, 1810, 13, 3, 1009, 15, 143, 369, 51, 205, 1, 0, 3394, 702, 5, 11, 942334, 106242, 7412, 780, 29, 35, 1489, 129583, 1, 3, 1, 0, 32996, 32540, 152, 104, 1313, 15071, 8, 0, 978, 3118, 418164, 106124, 1847, 6345, 4, 0, 2, 0, 807, 1241, 7043, 58493, 1, 0, 236, 20, 21, 11, 200227, 324061, 433, 591, 2435, 13949, 911, 113, 16008, 16760, 683717, 364859, 23327, 42209, 64, 64, 56, 8136, 3, 13, 877, 1171, 45, 19, 63, 1, 7516, 58020, 46, 82, 82112, 966464, 10802, 5582, 32661, 107, 120, 8, 18056, 47480, 105, 151, 8, 8, 124, 132, 222788, 825788, 10799, 5585, 130226, 846, 1, 3, 4711, 3481, 220, 292, 327882, 720694, 1, 7, 114, 14, 241, 15, 1580, 468, 4046, 50, 63534, 2002, 21085, 11683, 0, 1, 4, 4, 226, 30, 65262, 65810, 29, 35, 78, 50, 93, 35, 18582, 46954, 6937, 1255, 35, 93, 23893, 41643, 289282, 235006, 14862, 1522, 7190, 25578, 2, 0, 35, 93, 4333, 3859, 8, 504, 717, 307, 910767, 137809, 382, 130, 3351, 13033, 2196, 14188, 0, 4, 216890, 45254, 245710, 16434, 467, 45, 34, 222, 0, 2, 19, 2029, 609903, 438673, 50352, 15184, 18173, 47363, 6455, 1737, 4, 12, 168, 344, 0, 8, 196, 60, 68, 60, 35, 93, 2190, 6002, 231, 25, 330, 7862, 816099, 232477, 539, 485, 40970, 24566, 5765, 2427, 7745, 8639, 23, 105, 851, 173, 4, 0, 5486, 2706, 1, 1, 2, 6, 20, 12, 0, 1, 200, 1848, 3, 253, 8, 24, 18, 14, 1, 0, 33, 223, 2, 0, 1600, 2496, 15, 1, 1265, 31503, 173, 1875, 1944, 104, 41, 23, 142, 882, 329, 7863, 297864, 226424, 3, 1, 903, 1145, 4, 4, 7, 25, 4813, 3379, 834, 190, 482, 542, 36, 92, 345609, 178679, 62191, 199953, 371588, 152700, 0, 2, 4328, 3864, 7440, 752, 1896, 2200, 120530, 141614, 639, 385, 125, 3, 207, 305, 0, 1, 59, 69, 82, 46, 0, 1, 624, 400, 3, 61, 231, 281, 1, 1, 7, 9, 2, 2, 218, 38, 8115, 77, 1, 7, 8, 0, 186935, 75209, 67, 61, 1022, 1026, 4, 0, 24026, 8742, 454, 58, 797348, 251228, 1832, 2264, 77, 947, 2, 0, 61, 451, 32112, 656, 826, 198, 15472, 17296, 3649, 447, 2, 2, 1505, 543, 19920, 12848, 90, 38, 590994, 457582, 623926, 424650, 828000, 220576, 2008, 40, 22, 10, 30, 482, 118360, 12712, 647020, 401556, 12328, 53208, 549, 523739, 3, 5, 27426, 38110, 2230, 14154, 425, 87, 45213, 85859, 196, 316, 23, 9, 962224, 86352, 2, 0, 118, 906, 3, 1, 1881, 167, 3049, 1047, 1, 0, 236026, 812550, 0, 1, 177, 847, 105, 23, 3309, 4883, 8077, 24691, 30273, 2495, 0, 1, 1, 7, 703879, 344697, 163946, 98198, 2824, 1272, 41667, 23869, 882, 142, 776, 248, 1083, 965, 3668, 29100, 230894, 293394, 127, 129, 744, 280, 1, 0, 2, 6, 331015, 717561, 195, 61, 2, 0, 12, 4, 3, 5, 1, 0, 1, 1, 245, 11, 63, 65, 577, 447, 2290, 5902, 1, 7, 0, 1, 181383, 80761, 1, 3, 745, 279, 974, 1074, 15, 1, 10474, 55062, 0, 2, 2, 14, 64, 4032, 476763, 47525, 4, 0, 827503, 221073, 3, 5, 260, 252, 5, 123, 23485, 42051, 13, 3, 2, 6, 0, 1, 76, 52, 2, 0, 875, 149, 182148, 342140, 12, 52, 9012, 515276, 21, 11, 0, 2, 2018, 30, 16, 0, 1, 1, 0, 4, 19090, 13678, 4814, 11570, 670, 354, 26, 6, 1, 1, 3447, 649, 29086, 36450, 13417, 52119, 3236, 860, 204386, 319902, 581944, 466632, 0, 2, 1, 3, 479, 65057, 244133, 18011, 626, 398, 52161, 996415, 1, 3, 7, 1, 104, 152, 11322, 21446, 514596, 533980, 370, 1678, 161, 130911, 2, 0, 35751, 226393, 1388, 660, 59904, 5632, 1, 0, 497, 15, 2, 2, 43, 213, 1, 1, 15075, 1309, 1182, 31586, 3826, 270, 1110, 7082, 200306, 61838, 275, 237, 3, 1, 192512, 69632, 471, 41, 9, 119, 0, 2, 6574, 9810, 14, 1010, 2284, 1812, 89, 39, 16915, 15853, 47419, 18117, 13, 19, 7555, 8829, 3, 61, 5, 3, 12825, 19943, 29, 35, 18, 14, 241, 15, 406, 1642, 59, 453, 4, 0, 6096, 26672, 7, 9, 13, 19, 0, 1, 473, 39, 70530, 60542, 14926, 1458, 2, 0, 4, 0, 85696, 176448, 163977, 884599, 27, 5, 2336, 1760, 172, 852, 96, 160, 825078, 223498, 824, 7368, 52, 12, 456, 3640, 13, 19, 77, 51, 1900, 6292, 64, 0, 291695, 756881, 7, 9, 4914, 11470, 2, 0, 0, 2, 2, 30, 21851, 10917, 1003, 3093, 0, 2, 211912, 50232, 46039, 19497, 1, 3, 31049, 1719, 413, 611, 698410, 350166, 36, 28, 163359, 98785, 12, 4, 5, 11, 21965, 43571, 1, 7, 485533, 563043, 33578, 228566, 3355, 741, 2694, 1402, 1, 0, 43004, 88068, 122840, 8232, 7373, 9011, 3976, 120, 0, 4, 1, 0, 12, 4, 463, 49, 725, 1323, 812, 3284, 1647, 401, 8609, 56927, 39090, 91982, 922828, 125748, 8, 8, 0, 8, 191802, 70342, 72330, 189814, 17, 15, 1, 0, 6, 2, 1790, 258, 156, 100, 374, 1674, 3587, 12797, 9918, 55618, 96, 32, 2, 0, 64, 960, 2, 0, 9017, 23751, 23, 9, 5405, 27363, 75, 53, 2460, 13924, 917, 3179, 4, 0, 19721, 242423, 130657, 917919, 41, 87, 0, 2, 703, 321, 885915, 162661, 3, 61, 1018, 6, 537, 487, 1078, 3018, 6218, 1974, 10567, 5817, 23, 9, 6, 2, 897477, 151099, 92852, 169292, 22, 10, 87306, 174838, 143243, 381045, 492, 3604, 10, 54, 17396, 15372, 1, 0, 5, 27, 2761, 30007, 350235, 698341, 48650, 16886, 2792, 13592, 40, 24, 257, 255, 158029, 890547, 14692, 18076, 2, 6, 415622, 108666, 356, 7836, 847, 1201, 15696, 17072, 571086, 477490, 53, 11, 10, 6, 0, 1, 4, 60, 714, 310, 139, 885, 17143, 507145, 7, 121, 733, 3363, 1243, 2853, 2, 2, 83, 429, 323749, 724827, 1, 1, 318, 261826, 322537, 726039, 85, 427, 4093, 3, 12015, 4369, 104828, 26244, 243021, 19123, 123, 5, 1, 1, 0, 4, 929, 95, 4, 0, 21317, 11451, 1, 0, 721, 303, 10, 22, 54375, 11161, 21, 11, 1, 3, 724729, 323847, 187, 837, 7, 1, 59, 197, 1999, 14385, 2, 2, 698, 326, 8173, 19, 20869, 44667, 5, 11, 17049, 48487, 7245, 947, 0, 2, 0, 4, 476953, 571623, 19, 13, 36020, 29516, 438, 74, 289233, 759343, 2, 0, 43598, 21938, 617, 407, 322, 190, 9, 119, 226, 30, 87, 169, 136, 376, 255420, 6724, 42, 86, 6, 2, 11, 117, 187, 3909, 264, 248, 909, 115, 3431, 665, 35, 29, 1, 1, 6178, 2014, 136100, 388188, 15, 17, 41, 87, 38147, 27389, 360, 3736, 351, 161, 16030, 16738, 103, 25, 102, 26, 2, 6, 502, 10, 81, 47, 7879, 313, 107, 21, 1, 0, 387, 637, 9730, 6654, 375, 1673, 1, 1, 11046, 5338, 6, 2, 279292, 244996, 3, 1, 15754, 630, 218, 38, 1176, 31592, 4, 0, 1818, 14566, 8117, 8267, 7, 1, 51843, 79229, 99206, 162938, 23, 9, 4275, 3917, 0, 4, 26, 6, 28973, 3795, 12261, 4123, 69787, 61285, 5000, 11384, 40474, 25062, 12, 4, 8, 24, 7727, 465, 22782, 108290, 63, 1, 1, 0, 9, 7, 33, 223, 49, 15, 243685, 18459, 323160, 725416, 2400, 1696, 69, 4027, 111, 401, 19, 45, 120029, 11043, 1, 3, 181892, 80252, 4449, 3743, 177488, 84656, 16746, 16022, 5, 27, 214961, 47183, 21286, 240858, 2719, 5473, 23, 9, 98332, 163812, 252145, 272143, 4, 28, 78590, 52482, 1, 15, 75, 53, 206, 306, 30568, 2200, 624, 400, 62701, 2835, 0, 2, 33684, 97388, 1114, 934, 475701, 572875, 0, 1, 1, 3, 7372, 25396, 4282, 3910, 4, 0, 4, 4, 214, 298, 132327, 129817, 22982, 42554, 399725, 124563, 9, 7, 11622, 4762, 4248, 257896, 3164, 5028, 12473, 20295, 876683, 171893, 507, 5, 0, 1}
        ));
        System.out.println(new Solution().countPairs(
                new int[]{2, 14, 11, 5, 1744, 2352, 0, 1, 1300, 2796, 0, 4, 376, 1672, 73, 55, 2006, 42, 10, 6, 0, 2, 2, 0, 0, 1, 0, 1, 0, 2, 271, 241, 1, 63, 1117, 931, 3, 5, 378, 646, 2, 0, 2, 0, 15, 1}
        ));
        System.out.println(new Solution().countPairs(
                new int[]{0}
        ));
        System.out.println(new Solution().countPairs(
                new int[]{0, 0}
        ));
    }

    static class Solution {
        public int countPairs(int[] deliciousness) {
            // 构建集合
            Set<Integer> set = new HashSet<>();
            for (int i = 0; i <= 22; i++) {
                set.add((int) Math.pow(2, i));
            }
            // 集合遍历
            BigInteger res = new BigInteger("0");
            Map<Integer, Integer> map = new HashMap<>();
            Map<Integer, Integer> indexMap = new HashMap<>();
            for (int declious : deliciousness) {
                map.put(declious, map.getOrDefault(declious, 0) + 1);
            }
            List<Integer> list = new ArrayList<>(map.keySet());
            for (int i = 0; i < list.size(); i++) {
                indexMap.put(list.get(i), i);
            }
            for (int i = 0; i < list.size(); i++) {
                int declious = list.get(i);
                for (int pow2 : set) {
                    if (pow2 > declious && map.containsKey(pow2 - declious)) {
                        int left = pow2 - declious;
                        int leftIndex = indexMap.get(left);
                        int leftNum = map.get(left);
                        if (leftIndex == i) {
                            res = res.add(new BigInteger((leftNum - 1) * leftNum / 2 + ""));
                        } else if (i < leftIndex) {
                            res = res.add(new BigInteger(map.get(declious) * map.get(left) + ""));
                        }
                    }
                }
            }
            return res.mod(new BigInteger("1000000007")).intValue();
        }
    }

}
