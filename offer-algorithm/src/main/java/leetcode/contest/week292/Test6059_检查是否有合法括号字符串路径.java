package leetcode.contest.week292;

import java.util.*;

public class Test6059_检查是否有合法括号字符串路径 {

    public static void main(String[] args) {
        System.out.println(new Solution().hasValidPath(new char[][]{{'(', '(', '('}, {')', '(', ')'}, {'(', '(', ')'}, {'(', '(', ')'}}));
        System.out.println(new Solution().hasValidPath(new char[][]{{')', ')'}, {'(', '('}}));
        System.out.println(new Solution().hasValidPath(new char[][]{{'(', ')', ')', '(', '(', '(', '(', ')', ')', '(', ')', '(', ')', '(', '(', '(', '(', ')', '(', ')', '('}, {'(', '(', ')', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', '(', ')', '(', '(', '(', '(', '(', ')'}, {')', ')', '(', ')', ')', '(', '(', ')', '(', '(', ')', '(', ')', ')', '(', ')', ')', '(', '(', ')', ')'}, {'(', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', '(', ')', '(', ')', ')', '(', ')', ')', ')'}, {'(', '(', '(', ')', '(', '(', ')', '(', ')', ')', '(', ')', ')', ')', ')', ')', ')', '(', ')', '(', '('}, {')', ')', '(', '(', ')', ')', ')', ')', ')', '(', ')', ')', ')', '(', '(', ')', '(', '(', '(', '(', ')'}, {')', ')', ')', ')', '(', ')', '(', ')', '(', '(', ')', '(', '(', ')', '(', '(', ')', ')', '(', ')', '('}, {'(', ')', '(', '(', '(', ')', ')', ')', ')', '(', '(', ')', '(', '(', ')', ')', '(', ')', ')', ')', '('}, {'(', ')', '(', ')', '(', '(', '(', '(', ')', '(', '(', '(', '(', '(', '(', ')', '(', ')', '(', ')', ')'}, {'(', ')', '(', '(', '(', ')', '(', ')', ')', ')', ')', '(', '(', '(', '(', ')', ')', '(', '(', '(', ')'}, {'(', '(', ')', '(', ')', ')', '(', ')', '(', ')', ')', ')', ')', ')', '(', ')', '(', ')', ')', ')', '('}, {')', '(', '(', '(', ')', '(', ')', ')', '(', ')', '(', ')', '(', '(', ')', '(', '(', ')', '(', '(', ')'}, {'(', ')', '(', ')', ')', '(', '(', ')', '(', ')', '(', ')', ')', ')', '(', '(', '(', '(', ')', '(', ')'}, {'(', '(', ')', '(', ')', ')', '(', '(', '(', ')', '(', ')', '(', '(', ')', ')', '(', '(', '(', ')', ')'}, {'(', '(', '(', '(', ')', ')', '(', ')', '(', '(', '(', ')', ')', '(', ')', '(', ')', ')', ')', ')', '('}, {'(', '(', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')', '(', '(', ')', '(', ')', '(', '(', '(', ')'}, {')', ')', ')', ')', ')', ')', '(', ')', ')', ')', '(', '(', ')', '(', ')', '(', '(', '(', '(', ')', ')'}}));
        System.out.println(new Solution().hasValidPath(new char[][]{{'(', '(', '(', '(', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', '(', '(', ')', ')', '(', ')', '(', ')', ')', '(', ')', ')', ')', ')', '(', ')', '(', '('}, {'(', ')', ')', '(', '(', ')', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', '(', ')', ')', '(', '(', '(', '(', ')', ')', ')', ')', ')', '(', '(', ')', '(', '('}, {')', ')', '(', '(', ')', ')', ')', ')', '(', ')', '(', ')', ')', ')', '(', '(', ')', '(', ')', '(', '(', '(', ')', ')', ')', ')', ')', ')', ')', ')', ')', '(', '('}, {'(', '(', '(', ')', '(', ')', ')', ')', '(', ')', '(', '(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', '(', ')', '(', ')', ')', ')'}, {')', '(', ')', '(', ')', ')', ')', ')', '(', '(', '(', '(', ')', '(', ')', '(', '(', '(', '(', '(', ')', '(', '(', ')', ')', '(', '(', '(', ')', '(', ')', ')', '('}, {')', ')', ')', '(', ')', ')', ')', '(', '(', ')', ')', '(', '(', '(', '(', ')', '(', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')', '(', '(', '('}, {')', '(', ')', '(', '(', ')', ')', '(', ')', ')', ')', '(', '(', '(', ')', '(', '(', '(', ')', '(', ')', '(', ')', ')', ')', ')', ')', '(', ')', ')', '(', '(', ')'}, {'(', '(', ')', ')', '(', ')', ')', '(', '(', '(', '(', ')', '(', ')', '(', '(', '(', '(', '(', '(', ')', '(', ')', '(', ')', ')', '(', '(', '(', ')', '(', '(', ')'}, {')', ')', '(', '(', ')', ')', '(', '(', '(', '(', '(', '(', '(', ')', ')', '(', '(', '(', ')', ')', '(', ')', '(', '(', ')', ')', '(', ')', ')', '(', ')', '(', '('}, {')', ')', ')', ')', '(', ')', ')', '(', '(', '(', '(', ')', ')', ')', '(', ')', ')', ')', ')', ')', ')', '(', '(', '(', '(', ')', ')', ')', ')', '(', '(', '(', ')'}}));
    }

    static class Solution {
        public boolean hasValidPath(char[][] grid) {
            int height = grid.length;
            int width = grid[0].length;
            // BFS
            Queue<Pos> queue = new ArrayDeque<>();
            queue.add(new Pos(0, 0, grid[0][0] == '(' ? 1 : -1));
            while (!queue.isEmpty()) {
                Pos pos = queue.poll();
                int currentY = pos.y;
                int currentX = pos.x;
                int currentStatus = pos.status;
                if (currentY == height - 1 && currentX == width - 1 && currentStatus == 0) {
                    return true;
                }
                if (currentY + 1 < height) {
                    int nextStatus = currentStatus + (grid[currentY + 1][currentX] == '(' ? 1 : -1);
                    Pos nextPos = new Pos(currentY + 1, currentX, nextStatus);
                    if (nextStatus < 0) {
                        continue;
                    }
                    queue.add(nextPos);
                }
                if (currentX + 1 < width) {
                    int nextStatus = currentStatus + (grid[currentY][currentX + 1] == '(' ? 1 : -1);
                    Pos nextPos = new Pos(currentY, currentX + 1, nextStatus);
                    if (nextStatus < 0) {
                        continue;
                    }
                    queue.add(nextPos);
                }
            }
            return false;
        }

        class Pos {
            int y;
            int x;
            int status;

            public Pos(int y, int x, int status) {
                this.y = y;
                this.x = x;
                this.status = status;
            }

            @Override
            public String toString() {
                return y + "," + x + "," + status;
            }
        }
    }

    static class Solution_DFS {
        boolean result = false;
        int stack = 0;

        public boolean hasValidPath(char[][] grid) {
            dfs(grid, 0, 0);
            return result;
        }

        private void dfs(char[][] grid, int y, int x) {
            if (result) {
                return;
            }
            if (y >= grid.length || x >= grid[0].length) {
                return;
            }
            if (y == grid.length - 1 && x == grid[0].length - 1) {
                if (grid[y][x] == ')' && stack == 1) {
                    result = true;
                }
            }
            char current = grid[y][x];
            if (current == '(') {
                stack++;
                dfs(grid, y + 1, x);
                dfs(grid, y, x + 1);
                stack--;
            } else if (current == ')') {
                if (stack <= 0) {
                    return;
                } else {
                    stack--;
                    dfs(grid, y + 1, x);
                    dfs(grid, y, x + 1);
                    stack++;
                }
            }
        }
    }

}
