package leetcode.problems;

import java.util.*;

public class Test0421_数组中两个数的最大异或值 {

    public static void main(String[] args) {
        System.out.println(new Solution().findMaximumXOR(new int[]{3, 10, 5, 25, 2, 8}));
        System.out.println(new Solution().findMaximumXOR(new int[]{14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70}));
        System.out.println(new Solution().findMaximumXOR(new int[]{
                195805650,320721643,340432419,502206121,72435837,60214736,117395069,997008927,582252631,472938889,567301899,529971775,709934642,902550337,502015714,33685112,721576337,241341068,475800321,231743982,442440865,620196306,468159205,980265736,531334265,1050574845,412969836,7252543,678444438,45246309,989180910,680382501,1001404561,1008588282,479971737,315142836,566260514,768209588,148059404,866143704,381385049,137202743,1048266295,628394814,496476954,771452106,431508081,201678173,702532057,367918970,725037274,671922629,906392215,934720137,588658931,419430055,1012705308,302924572,359106427,720080805,682099061,937319973,1046068619,779367899,945426608,848478861,201092596,955223853,526562775,663081126,329714904,178788562,665424426,244265679,956315015,959947040,556013471,666012520,748642971,470101146,411594910,1038832631,139981910,417667639,715537401,622680475,790307131,248845043,710695209,18875058,914468074,1020989595,791429327,66046405,1072595264,587466709,41198953,821565883,123143599,998244717,21190740,327513918,229101786,165785318,684502786,911221608,617255028,511362624,595747963,170697649,55427929,199045382,214446873,165141276,631808493,745855643,21668479,149266592,589484212,910764486,838190554,1003486932,1012414770,987361658,260597339,656509150,157394181,286975210,80532979,63598749,228161344,127294156,359589457,109431316,385916937,480766957,393199640,409806874,793192053,450541813,490608229,782663231,74441891,392749947,107704960,254768128,253153814,819463755,218108897,818713903,475560023,196655350,91562085,68717468,22441419,729967258,658972881,330419719,509473489,630398963,338527622,159772746,934153504,206430370,871411590,121766081,165559646,274161596,450836903,534879997,534915843,905128854,283409941,542848937,280060528,478474447,792564749,896340412,713916746,908795037,718422487,479041760,837348636,763292252,19341060,771199265,971534380,393291859,502686440,769302488,1016060061,793362376,795089754,849696218,948073926,985877575,1054197675,242656988,980160464,340479534,73831396,162167338,403092886,962610300,184496195,478625928,46038200,453818843,453673206,906869607,939102209,243863786,30188057,1038410059,889137146,469244879,727153645,526945147,880429518,155372285,622912346,198793450,463661152,521797441,1060831912,27685477,486622122,101829395,573081208,115317758,920003160,971026202,257051400,616742840,320913829,817700351,572261799,308731251,792860532,886887287,127870581,479038489,289817266,235883146,50064991,948893705,818431466,964714281,877753690,275188419,427321385,227763951,944970974,904439764,759388179,132140342,377465510,184789764,202829126,592838237,334923685,221844414,122233838,879963735,552460107,304515519,647835305,698828407,918985465,590718722,619330204,768640634,482801089,107459306,710951381,181970133,694920290,575060657,711919587,175372864,912346498,183481104,726506676,855475330,488164909,642092846,488407470,511233150,838698637,892991694,112151823,162265982,340503275,809407924,770729865,425601982,142988517,80905816,31932441,867811388,864768241,573540813,744559143,734318525,743302162,588837619,288528867,486666019,975701464,46717659,555832030,892233453,903072413,721304698,107453671,169811982,587135485,153871761,282878760,968840179,947948949,952428763,666280320,841927630,758322176,816610680,653780002,536787751,1063629839,29521817,778804590,546341285,217369671,345032301,139718158,915726361,838855327,874292043,766131028,514223307,71112826,332488223,235483091,34329352,552908515,512652057,556859963,630368747,596633351,1020745108,674012793,311455339,987020023,539008068,605621519,402386085,850995870,20904611,680244400,565191786,685345023,535933853,261476895,63468811,26244531,831910265,896352840,941399140,329811618,217034506,28474015,736253222,548873729,18587158,609471417,459808873,269443211,630961926,202820136,435488369,39362563,293854671,1018886554,63363775,868584937,130631712,180524596,942559066,48863867,112234700,584554540,432989023,305030127,140289145,584175013,855439558,434764270,578384777,710584014,1010343287,555006290,319624521,691507261,584209292,849460259,677726296,288159624,228582631,91232719,304315480,830723621,1038192119,753234857,158191835,573726339,171903942,136317349,507164039,77506408,300013895,97571665,398432140,586125,632694749,850319637,905955399,1066099575,97083182,680315310,41453878,398940056,818229289,336594919,1039231263,438671525,596707157,654879898,426270331,1002448953,118385244,761477351,136366888,367356843,703925462,448885938,416372047}));
    }

    static class Solution {
        public int findMaximumXOR(int[] nums) {
            Trie trie = new Trie();
            for (int num : nums) {
                trie.insert(String.format("%32s", Integer.toString(num, 2)).replace(' ', '0'));
            }
            int max = 0;
            for (int num : nums) {
                int current = 0;
                String binary = String.format("%32s", Integer.toString(num, 2)).replace(' ', '0');
                Trie.Node node = trie.root;
                for (char c : binary.toCharArray()) {
                    current = current << 1;
                    if (c == '0') {
                        if (node.next1 != null) {
                            current |= 1;
                            node = node.next1;
                        } else {
                            node = node.next0;
                        }
                    } else {
                        if (node.next0 != null) {
                            current |= 1;
                            node = node.next0;
                        } else {
                            node = node.next1;
                        }
                    }
                }
                max = Math.max(max, current);
            }
            return max;
        }

        class Trie {
            class Node {
                Node next0;
                Node next1;
            }

            Node root;

            public Trie() {
                root = new Node();
            }

            public void insert(String word) {
                Node current = root;
                for (char c : word.toCharArray()) {
                    if (c == '0') {
                        if (current.next0 != null) {
                            current = current.next0;
                        } else {
                            Node node = new Node();
                            current.next0 = node;
                            current = node;
                        }
                    } else {
                        if (current.next1 != null) {
                            current = current.next1;
                        } else {
                            Node node = new Node();
                            current.next1 = node;
                            current = node;
                        }
                    }
                }
            }
        }
    }

}
