package leetcode.problems;

import java.util.*;

public class Test6364_无平方子集计数 {

    public static void main(String[] args) {
        System.out.println(new Solution().squareFreeSubsets(new int[]{3, 4, 4, 5}));
        System.out.println(new Solution().squareFreeSubsets(new int[]{1}));
        System.out.println(new Solution().squareFreeSubsets(new int[]{26, 6, 4, 27, 6, 18}));
        System.out.println(new Solution().squareFreeSubsets(new int[]{20,9,1,30,30,18,16,6,9,16,26,30,28,6,13,30,11,9,5,1,6,3,15,10,12,1,9,19,15,14,28,27,14,26,19,2,5,13,24,25,5,25,23,4,8,8,23,13,3,9,10,13,7,17,11,8,4,5,15,11,11,15,26,19,28,12,8,20,5,10,5,3,5,17,14,22,19,8,21,24,8,27,16,20,4,13,25,17,16,2,16,5,1,18,2,23,14,14,6,11,22,9,5,24,8,11,4,27,7,21,28,27,1,16,5,18,22,1,30,12,2,30,4,1,18,17,4,11,20,10,5,2,4,15,11,25,14,26,1,20,30,8,8,9,24,10,27,9,19,21,3,22,26,28,24,30,6,3,15,19,21,22,23,28,18,14,2,24,1,4,18,5,5,3,4,3,7,17,30,16,18,6,10,7,23,11,1,21,25,24,24,19,19,30,7,28,1,19,14,23,9,11,6,4,22,22,20,18,21,3,17,3,15,26,17,16,3,23,28,1,15,22,7,28,22,17,7,26,25,29,21,12,24,29,21,27,26,4,13,17,2,28,24,20,12,20,13,23,24,5,28,17,28,3,17,20,14,19,25,20,28,23,7,7,29,20,9,7,20,6,8,3,16,26,18,23,25,30,18,6,7,22,9,28,23,12,17,17,4,14,10,4,5,6,7,25,23,7,12,28,9,28,8,28,5,26,7,19,10,9,30,8,10,22,9,5,22,13,15,13,11,4,20,19,22,7,2,5,5,8,29,6,26,15,9,16,5,12,18,28,25,30,30,29,1,16,24,18,13,3,15,27,13,1,9,13,20,29,9,23,17,24,22,26,23,10,24,26,26,27,10,12,30,16,12,1,29,9,13,15,9,5,2,15,12,9,9,9,18,9,22,28,15,4,21,17,23,10,25,10,12,24,30,13,13,24,29,18,5,28,16,1,15,15,30,21,15,21,18,10,23,27,27,2,6,4,12,26,17,24,6,29,29,12,24,27,7,15,14,22,18,23,27,6,6,18,19,15,9,1,3,24,16,14,27,6,19,9,2,16,8,9,24,9,1,14,12,3,18,18,21,28,11,15,15,23,26,4,23,12,18,20,19,9,23,3,7,21,21,27,25,29,11,19,1,16,29,25,16,20,21,17,17,20,18,8,15,27,17,21,20,23,14,9,29,21,10,3,13,24,3,12,19,14,9,20,25,18,30,8,2,14,3,14,7,23,4,12,26,14,6,3,28,20,8,30,10,19,8,14,3,19,6,12,4,25,28,20,7,19,7,30,17,19,19,1,26,2,22,13,5,25,10,17,24,12,26,23,7,13,22,22,11,29,22,12,7,27,10,26,3,8,4,29,13,4,1,1,24,23,1,13,4,23,26,2,16,25,23,3,25,15,21,1,25,5,25,21,14,30,21,7,12,2,23,20,19,14,28,23,10,18,30,25,3,2,25,14,27,16,18,27,3,25,20,19,29,1,10,18,13,28,14,2,12,5,10,17,4,20,3,14,26,30,19,17,6,15,22,28,18,3,11,24,19,7,16,25,28,26,6,7,25,3,28,6,18,9,29,9,29,1,23,14,22,17,21,15,14,30,23,12,26,25}));
    }

    static class Solution {
        public int squareFreeSubsets(int[] nums) {
            int MOD = 1000000007;
            // 压缩状态-计数
            List<Integer> invalidSet = Arrays.asList(4, 8, 9, 12, 16, 18, 20, 24, 25, 27, 28);
            Map<Integer, Long> stateCntMap = new HashMap<>();
            stateCntMap.put(0, 1L);
            for (int num : nums) {
                if (invalidSet.contains(num)) {
                    continue;
                }
                int currenState = getPrimeState(num);
                // 计算该数引入时与原来的数构成的状态
                Map<Integer, Long> currentStateCntMap = new HashMap<>();
                for (int state : stateCntMap.keySet()) {
                    if ((currenState & state) == 0) {
                        currentStateCntMap.put(currenState | state, stateCntMap.get(state));
                    }
                }
                // 合并状态
                for (int state : currentStateCntMap.keySet()) {
                    Long cnt = currentStateCntMap.get(state);
                    stateCntMap.put(state, (stateCntMap.getOrDefault(state, 0L) + cnt) % MOD);
                }
            }
            long res = -1;
            for (long cnt : stateCntMap.values()) {
                res += cnt;
                res %= MOD;
            }
            return (int) res;
        }

        private int getPrimeState(int num) {
            // 计算指数组成的state
            int state = 0;
            for (int factor = 2; factor <= num; factor++) {
                if (num % factor == 0) {
                    state |= 1 << factor;
                    num /= factor;
                }
            }
            return state;
        }
    }

}